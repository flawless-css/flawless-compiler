#!/usr/bin/env node

/**
 * ho
 * ---
 *
 * @argument filename to parse and compile
 * @flag -s --silent suppresses output logs
 * @flag -c --compress use less compression
 * @flag -p --paths specify import paths
 * @flag --source-map include inline source map
 *
 * @usage
 * ho ./spec/fixtures.less
 * ho < ./spec/fixtures.less > test.css
 * ho ./src/styles.less -p ./src/ -c --source-map > ./public/styles.css
 */

var fs = require( 'fs' );
var path = require( 'path' );

var chalk = require( 'chalk' );
var argv = require( 'minimist' )( process.argv.slice( 2 ) )
var Compiler = require( '../dist' )
var log = require( '../dist/log' )

// Less render options
var paths = argv.p || argv.paths || null
var compress = argv.c || argv.compress
var filename = argv._[ 0 ] || argv.e
var sourceMap = argv[ 'source-map' ]


// Create the ho object
var compiler = new Compiler({
    paths: paths ? paths.split( ',' ) : null,
    compress: compress,
    filename: filename,
    sourceMap: sourceMap
})

compiler.on( 'error', function( err ) {
    log.error( err )
})


// Try to check that an input is present
if ( process.stdin.isTTY && !argv._[ 0 ] ) {
    log.error( 'Supply input file' )
    process.exit( 1 )
}

// Display deprecation message
process.stderr.write( 'ho-compile is deprecated, use https://github.com/hocss/ho instead' )


// Suppress logs by default
log.suppress( true )


// Pipe specified file
var filepath
if ( filename ) {
    filepath = path.join( process.env.PWD, filename )
    fs.stat( filepath, function( err ) {
        if ( !argv.s && !argv.silent ) {
            log.suppress( false )
        }
        if ( err ) {
            return log.error( 'Input file not found' )
        }

        fs.createReadStream( filepath )
            .pipe( compiler )
            .pipe( process.stdout )

    })
}

// Pipe input
if ( !filename ) {
    process.stdin
        .pipe( compiler )
        .pipe( process.stdout )
}
